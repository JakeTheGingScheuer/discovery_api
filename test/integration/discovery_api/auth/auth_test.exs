defmodule DiscoveryApi.Auth.AuthTest do
  import ExUnit.CaptureLog
  use ExUnit.Case
  use Divo, services: [:ldap, :redis]
  alias DiscoveryApi.Data.Dataset
  alias DiscoveryApi.Test.Helper

  alias SmartCity.TestDataGenerator, as: TDG

  setup_all do
    Paddle.authenticate([cn: "admin"], "admin")
    Paddle.add([ou: "People"], objectClass: ["top", "organizationalunit"], ou: "People")
    make_ldap_user("FirstUser")
    make_ldap_user("SecondUser")

    Paddle.add([ou: "Group"], objectClass: ["top", "organizationalunit"], ou: "Group")

    dn = [cn: "this_is_a_group", ou: "Group"]

    group = [
      objectClass: ["top", "groupofnames"],
      cn: "this_is_a_group",
      member: ["uid=FirstUser,ou=People"]
    ]

    Paddle.add(dn, group)
  end

  @moduletag capture_log: true
  test "Successfully login via the login url with valid password" do
    %{status_code: status_code, body: body} =
      "http://localhost:4000/api/v1/login"
      |> HTTPoison.get!([], hackney: [basic_auth: {"FirstUser", "admin"}])
      |> Map.from_struct()

    assert "FirstUser logged in." == body
    assert status_code == 200
  end

  @moduletag capture_log: true
  test "Fails attempting to login via the login url with invalid password" do
    %{status_code: status_code, body: body} =
      "http://localhost:4000/api/v1/login"
      |> HTTPoison.get!([], hackney: [basic_auth: {"FirstUser", "badpassword"}])
      |> Map.from_struct()

    assert "Not Authorized" == body
    assert status_code == 401
  end

  @moduletag capture_log: true
  test "Is able to access a restricted dataset with a cookie generated by login" do
    organization = TDG.create_organization(%{dn: "cn=this_is_a_group,ou=Group"})
    dataset = Helper.sample_dataset(%{private: true, organizationDetails: organization})
    Dataset.save(dataset)

    actual =
      Redix.command!(:redix, ["GET", "discovery-api:dataset:#{dataset.id}"])
      |> Jason.decode!(keys: :atoms)

    %{status_code: 200, body: "FirstUser logged in.", headers: headers} =
      "http://localhost:4000/api/v1/login"
      |> HTTPoison.get!([], hackney: [basic_auth: {"FirstUser", "admin"}])
      |> Map.from_struct()

    {"set-cookie", cookie_string} = Enum.find(headers, fn {header, value} -> header == "set-cookie" end)
    token = Helper.extract_token(cookie_string)

    %{status_code: status_code, body: body} =
      "http://localhost:4000/api/v1/dataset/#{dataset.id}/"
      |> HTTPoison.get!(Cookie: "#{Helper.default_guardian_token_key}=#{token}")

    result = Jason.decode!(body, keys: :atoms)

    assert actual.id == result.id
    assert status_code == 200
  end

  @moduletag capture_log: true
  test "Is able to access a restricted dataset with a token generated by login" do
    organization = TDG.create_organization(%{dn: "cn=this_is_a_group,ou=Group"})
    dataset = Helper.sample_dataset(%{private: true, organizationDetails: organization})
    Dataset.save(dataset)

    actual =
      Redix.command!(:redix, ["GET", "discovery-api:dataset:#{dataset.id}"])
      |> Jason.decode!(keys: :atoms)

    %{status_code: 200, body: "FirstUser logged in.", headers: headers} =
      "http://localhost:4000/api/v1/login"
      |> HTTPoison.get!([], hackney: [basic_auth: {"FirstUser", "admin"}])
      |> Map.from_struct()

    {"token", token} = Enum.find(headers, fn {header, value} -> header == "token" end)

    %{status_code: status_code, body: body} =
      "http://localhost:4000/api/v1/dataset/#{dataset.id}/"
      |> HTTPoison.get!(Authorization: "Bearer #{token}")

    result = Jason.decode!(body, keys: :atoms)

    assert actual.id == result.id
    assert status_code == 200
  end

  @moduletag capture_log: true
  test "Is not able to access a restricted dataset with a bad token" do
    organization = TDG.create_organization(%{dn: "cn=azzurro_lucky,ou=dev,dc=internal,dc=smartcolumbusos,dc=com"})
    dataset = Helper.sample_dataset(%{private: true, organizationDetails: organization})
    Dataset.save(dataset)

    %{status_code: status_code, body: body} =
      "http://localhost:4000/api/v1/dataset/#{dataset.id}/"
      |> HTTPoison.get!(Cookie: "#{Helper.default_guardian_token_key()}=wedidthebadthing")

    result = Jason.decode!(body, keys: :atoms)

    assert result.message == "Not Found"
    assert status_code == 404
  end

  def make_ldap_user(name) do
    dn = [uid: name, ou: "People"]

    user = [
      objectClass: ["account", "posixAccount"],
      cn: name,
      uid: name,
      loginShell: "/bin/bash",
      homeDirectory: "/home/user",
      uidNumber: 501,
      gidNumber: 100,
      userPassword: "{SSHA}/02KaNTR+p0r0KSDfDZfFQiYgyekBsdH"
    ]

    :ok = Paddle.add(dn, user)
    {:ok, [user | _]} = Paddle.get(base: "uid=#{name},ou=People")
    user
  end
end
